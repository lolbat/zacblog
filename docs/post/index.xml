<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on An old coder</title>
    <link>https://lolbat.github.io/zacblog/post/</link>
    <description>Recent content in Posts on An old coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Aug 2021 10:12:57 -0600</lastBuildDate><atom:link href="https://lolbat.github.io/zacblog/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using JSON</title>
      <link>https://lolbat.github.io/zacblog/post/using-json/</link>
      <pubDate>Mon, 23 Aug 2021 10:12:57 -0600</pubDate>
      
      <guid>https://lolbat.github.io/zacblog/post/using-json/</guid>
      <description>The problem of serializing data and then importing it back into your application is very, very old. I remember Andy White and a few others discussing approaches to this in Director twenty years ago. Andy came up with some code that could do it in Lingo and then XML became a thing1 and we all started using XML for serializing data. Andy, being Andy, came out with a better, and faster, XML parser than Macromedia did.</description>
    </item>
    
    <item>
      <title>Building a Page</title>
      <link>https://lolbat.github.io/zacblog/post/building-a-page/</link>
      <pubDate>Fri, 20 Aug 2021 10:59:46 -0600</pubDate>
      
      <guid>https://lolbat.github.io/zacblog/post/building-a-page/</guid>
      <description>I don&amp;rsquo;t know about how it works now but when ColdFusion was stilled owned by Allaire I really enjoyed using the language and the coding tools. Macromedia purchased Allaire in 2001 and it was all downhill for the language at that point. I was sadly done using CFML before Adobe came into the picture but I can&amp;rsquo;t imagine that they made anything better.
There were any number of things that I liked about working in ColdFusion but the one thing that really made an impact was your ability to compartmentalise code into external files and either include them directly or make calls to them.</description>
    </item>
    
    <item>
      <title>Using Hugo</title>
      <link>https://lolbat.github.io/zacblog/post/using-hugo/</link>
      <pubDate>Thu, 19 Aug 2021 15:41:15 -0600</pubDate>
      
      <guid>https://lolbat.github.io/zacblog/post/using-hugo/</guid>
      <description>Hugo is a considerably different writing process than using a CMS like Wordpress1. You can&amp;rsquo;t use Wordpress on a server that isn&amp;rsquo;t configured to serve dynamic content. It is interesting that I have gone from doing work that required a server instance with php or ColdFusion as well as a database to building apps and a CMS that are served from static HTML.
You also lose control over your content with Wordpress even if you run your own server or VPS.</description>
    </item>
    
    <item>
      <title>What have we learned so far? </title>
      <link>https://lolbat.github.io/zacblog/post/what-have-we-learned/</link>
      <pubDate>Tue, 17 Aug 2021 19:40:22 -0600</pubDate>
      
      <guid>https://lolbat.github.io/zacblog/post/what-have-we-learned/</guid>
      <description>So this morning I didn&amp;rsquo;t have a blog and now I have this creaking monstrosity that is hosted on a global source code repository and created using a series of command line tools that I didn&amp;rsquo;t have installed this morning either. Its been a bit of a crazy day but I have accomplished a fair bit. So what do I know now that I didn&amp;rsquo;t know this morning?
#1 git</description>
    </item>
    
    <item>
      <title>Deploying</title>
      <link>https://lolbat.github.io/zacblog/post/deploying/</link>
      <pubDate>Tue, 17 Aug 2021 15:29:15 -0600</pubDate>
      
      <guid>https://lolbat.github.io/zacblog/post/deploying/</guid>
      <description>So it works locally. Now how do we get it to Github?
My first problem is that the repository is private. I need to make it public so that Github Pages will allow me to host it using the free plan that I am using.
Hugo defaults to building all of your static content into the /public directory and Github pages, which assumes that you are using Jekyll wants to find everything in the /doc directory.</description>
    </item>
    
    <item>
      <title>Getting Going</title>
      <link>https://lolbat.github.io/zacblog/post/getting-going/</link>
      <pubDate>Tue, 17 Aug 2021 13:12:51 -0600</pubDate>
      
      <guid>https://lolbat.github.io/zacblog/post/getting-going/</guid>
      <description>You have to assume that any blog that involves using a command line tool and pushing content to a code control system will have a few hickups involved with getting it going. Such is the case with this blog. The Hugo docs seem to be based on the assumption taht you are going to get Github to render the static html pages. So their explanation of the process involves creating a Github Workflow Action.</description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://lolbat.github.io/zacblog/post/first-post/</link>
      <pubDate>Tue, 17 Aug 2021 11:26:09 -0600</pubDate>
      
      <guid>https://lolbat.github.io/zacblog/post/first-post/</guid>
      <description>A new blog A new start as a developer requires, I think, a new blog. And since my focus is going to be Javascript web application development then it seems as if my new blog should not only document that path but also help me along on that path. To that end, I am using the Hugo site generator and Github Pages to create this blog and host it.
There are so many new tools and practices that I am learning that it is all a buzz but it is also quite exciting.</description>
    </item>
    
  </channel>
</rss>
